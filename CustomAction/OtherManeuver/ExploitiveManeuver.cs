using BlueprintCore.Utils;
using Kingmaker.Blueprints;
using Kingmaker.EntitySystem.Entities;
using Kingmaker;
using PrestigePlus.Grapple;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Kingmaker.UnitLogic.Mechanics.Actions;
using Kingmaker.Blueprints.Root;
using Kingmaker.Designers.EventConditionActionSystem.Evaluators;
using Kingmaker.RuleSystem.Rules;
using Kingmaker.RuleSystem;
using Kingmaker.UnitLogic.Abilities.Components;
using Kingmaker.UnitLogic.Commands.Base;
using Kingmaker.UnitLogic;
using BlueprintCore.Blueprints.References;
using Kingmaker.Designers;
using Kingmaker.Utility;
using Kingmaker.ElementsSystem;
using Kingmaker.UnitLogic.Mechanics;
using BlueprintCore.Blueprints.CustomConfigurators.UnitLogic.Abilities;
using PrestigePlus.CustomComponent.Grapple;
using PrestigePlus.Blueprint.GrappleFeat;

namespace PrestigePlus.CustomAction.OtherManeuver
{
    internal class ExploitiveManeuver : ContextAction
    {
        public override string GetCaption()
        {
            return "ExploitiveManeuver";
        }

        // Token: 0x0600CBFF RID: 52223 RVA: 0x0034ECD0 File Offset: 0x0034CED0
        public override void RunAction()
        {
            UnitEntityData target = Target.Unit;
            if (target == null)
            {
                PFLog.Default.Error("Target unit is missing", Array.Empty<object>());
                return;
            }
            UnitEntityData caster = Context.MaybeCaster;
            if (caster == null)
            {
                PFLog.Default.Error("Caster is missing", Array.Empty<object>());
                return;
            }
            if (target == caster)
            {
                PFLog.Default.Error("Unit can't grapple themselves", Array.Empty<object>());
                return;
            }
            var maneuver = CombatManeuver.Pull;
            if (target.Descriptor.State.IsDead || caster.HasFact(CoolDown)) { return; }
            if (caster.HasFact(MythicFeat))
            {
                if (caster.HasFact(BullRush) && caster.HasFact(BullRushFeat))
                {
                    maneuver = CombatManeuver.BullRush;
                }
                else if (caster.HasFact(DirtyBlind) && caster.HasFact(DirtyFeat))
                {
                    maneuver = CombatManeuver.DirtyTrickBlind;
                }
                else if (caster.HasFact(DirtyEntangle) && caster.HasFact(DirtyFeat))
                {
                    maneuver = CombatManeuver.DirtyTrickEntangle;
                }
                else if (caster.HasFact(DirtySicken) && caster.HasFact(DirtyFeat))
                {
                    maneuver = CombatManeuver.DirtyTrickSickened;
                }
                else if (caster.HasFact(Disarm) && caster.HasFact(DisarmFeat))
                {
                    maneuver = CombatManeuver.Disarm;
                }
                else if (caster.HasFact(Sunder) && caster.HasFact(SunderFeat))
                {
                    maneuver = CombatManeuver.SunderArmor;
                }
                else if (caster.HasFact(Trip) && caster.HasFact(TripFeat))
                {
                    maneuver = CombatManeuver.Trip;
                }
                else if (caster.HasFact(Grapple) && caster.HasFact(GrappleFeat))
                {
                    maneuver = CombatManeuver.Grapple;
                }
            }
            RuleCombatManeuver ruleCombatManeuver = new RuleCombatManeuver(caster, target, maneuver, null);
            if (caster.Descriptor.Stats.Dexterity > caster.Descriptor.Stats.Strength)
            {
                ruleCombatManeuver.ReplaceBaseStat = Kingmaker.EntitySystem.Stats.StatType.Dexterity;
            }
            ruleCombatManeuver = (target.Context?.TriggerRule(ruleCombatManeuver)) ?? Rulebook.Trigger(ruleCombatManeuver);
            var duration = new Rounds?(1.Rounds());
            GameHelper.ApplyBuff(caster, CoolDown, duration);
            if (ruleCombatManeuver.Success)
            {
                TimeSpan? duration2 = duration != null ? new TimeSpan?(duration.Value.Seconds) : null;
                target.AddBuff(DeBuff, caster, duration2);
                if (maneuver == CombatManeuver.Pull)
                {
                    caster.AddBuff(Buff, caster, duration2);
                }
                if (maneuver != CombatManeuver.Grapple || caster.Get<UnitPartGrappleInitiatorPP>() || target.Get<UnitPartGrappleTargetPP>() || !ConditionTwoFreeHand.HasFreeHand(caster)) { return; }
                caster.Ensure<UnitPartGrappleInitiatorPP>().Init(target, CasterBuff, target.Context);
                target.Ensure<UnitPartGrappleTargetPP>().Init(caster, TargetBuff, caster.Context);
            }
        }

        // Token: 0x040087CF RID: 34767

        //public BlueprintBuff CasterBuff;

        // Token: 0x040087D0 RID: 34768

        private static BlueprintBuffReference Buff = BlueprintTool.GetRef<BlueprintBuffReference>("{1F58B574-C1D0-4D95-9888-2F765FBA7669}");
        private static BlueprintBuffReference DeBuff = BlueprintTool.GetRef<BlueprintBuffReference>("{7838922C-2131-42C5-824F-587AE3626D9D}");
        private static BlueprintBuffReference CoolDown = BlueprintTool.GetRef<BlueprintBuffReference>("{3952D4EF-8136-48ED-BA4A-8CFE13325B2D}");

        private static readonly string SeizetheBullRushbuffGuid = "{FDD7D762-A448-48FB-B72C-709D14285FF6}";

        private static readonly string SeizetheDirtyBlindbuffGuid = "{6142C847-22F1-410F-A132-9545D7404F4A}";

        private static readonly string SeizetheDirtyEntanglebuffGuid = "{723AC061-8A31-485B-976D-2E233B5B4B9E}";

        private static readonly string SeizetheDirtySickenbuffGuid = "{4B94C35F-0F34-494F-9CF3-BB2BAD84FCF9}";

        private static readonly string SeizetheDisarmbuffGuid = "{0E686D2C-2CBB-43F4-A247-110A85B938C1}";

        private static readonly string SeizetheSunderbuffGuid = "{E4FD5F1E-A417-47CE-AF53-CD0FC91225B0}";

        private static readonly string SeizetheTripbuffGuid = "{8DFA0D89-D1D5-4A63-AF3E-37655D9935D5}";

        private static readonly string SeizetheGrapplebuffGuid = "{55BD97E6-84AB-4E2A-9F0D-EF8A730DC7CF}";

        private static BlueprintBuffReference BullRush = BlueprintTool.GetRef<BlueprintBuffReference>(SeizetheBullRushbuffGuid);
        private static BlueprintBuffReference DirtyBlind = BlueprintTool.GetRef<BlueprintBuffReference>(SeizetheDirtyBlindbuffGuid);
        private static BlueprintBuffReference DirtyEntangle = BlueprintTool.GetRef<BlueprintBuffReference>(SeizetheDirtyEntanglebuffGuid);
        private static BlueprintBuffReference DirtySicken = BlueprintTool.GetRef<BlueprintBuffReference>(SeizetheDirtySickenbuffGuid);
        private static BlueprintBuffReference Disarm = BlueprintTool.GetRef<BlueprintBuffReference>(SeizetheDisarmbuffGuid);
        private static BlueprintBuffReference Grapple = BlueprintTool.GetRef<BlueprintBuffReference>(SeizetheGrapplebuffGuid);
        private static BlueprintBuffReference Sunder = BlueprintTool.GetRef<BlueprintBuffReference>(SeizetheSunderbuffGuid);
        private static BlueprintBuffReference Trip = BlueprintTool.GetRef<BlueprintBuffReference>(SeizetheTripbuffGuid);

        private static BlueprintBuffReference CasterBuff = BlueprintTool.GetRef<BlueprintBuffReference>("{D6D08842-8E03-4A9D-81B8-1D9FB2245649}");
        private static BlueprintBuffReference TargetBuff = BlueprintTool.GetRef<BlueprintBuffReference>("{F505D659-0610-41B1-B178-E767CCB9292E}");

        private static BlueprintFeatureReference BullRushFeat = BlueprintTool.GetRef<BlueprintFeatureReference>(FeatureRefs.ImprovedBullRush.ToString());
        private static BlueprintFeatureReference DirtyFeat = BlueprintTool.GetRef<BlueprintFeatureReference>(FeatureRefs.ImprovedDirtyTrick.ToString());
        private static BlueprintFeatureReference DisarmFeat = BlueprintTool.GetRef<BlueprintFeatureReference>(FeatureRefs.ImprovedDisarm.ToString());
        private static BlueprintFeatureReference GrappleFeat = BlueprintTool.GetRef<BlueprintFeatureReference>(ImprovedGrapple.StyleGuid);
        private static BlueprintFeatureReference SunderFeat = BlueprintTool.GetRef<BlueprintFeatureReference>(FeatureRefs.ImprovedSunder.ToString());
        private static BlueprintFeatureReference TripFeat = BlueprintTool.GetRef<BlueprintFeatureReference>(FeatureRefs.ImprovedTrip.ToString());

        private static BlueprintFeatureReference MythicFeat = BlueprintTool.GetRef<BlueprintFeatureReference>("{BCCD43B4-D897-4604-9957-5429ACDFB22C}");
    }
}
